syntax = "proto3";

package migration;

option go_package = "pkg/migration";


service ContainerMigration {
    rpc CheckpointContainer (CheckpointRequest) returns (CheckpointResponse);
    rpc TransferVolume (VolumeRequest) returns (VolumeResponse);
    rpc TransferContainerInfo (ContainerInfoRequest) returns (ContainerInfoResponse);
}

//pullContainer to local host(dst of migration) from remote host(src of migration)
service PullContainer {
    rpc PullContainer (PullRequest) returns (PullResponse);
}

service RecordF{
    rpc RecordFReset (RecordRequest) returns (RecordResponse);
}

message RecordRequest {
    string record_file_name = 1;
    string container_name = 2;
}

message RecordResponse {
    bool success = 1;
}

message PullRequest {
    string container_name = 1;
    string destination_addr = 2;
    string record_file_name = 3;

}

message PullResponse {
    bool success = 1;
    string container_id = 2;
    int64 bytesMigrateImage = 3;
    int64 bytesMigrateVolume = 4;
    int64 bytesMigrateCheckpoint = 5;
}

message CheckpointRequest {
    string container_id = 1;
    string record_file_name = 2;

}

message CheckpointResponse {
    string checkpoint_id = 1;
    bytes checkpoint_data = 2;
    int64 bytesMigrateCheckpoint = 3;
}

message VolumeRequest {
    string container_id = 1;
}

message VolumeResponse {
    string volume_name = 1;
    bytes volume_data = 2;
    string nfs_source = 3;
    string destination = 4;
    int64 bytesMigrateVolume = 5;
}

message ContainerInfoRequest {
    string container_id = 1;
}

message ContainerInfoResponse {
    bytes container_info=1;
}